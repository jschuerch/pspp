'From Pharo6.0 of 13 May 2016 [Latest update: #60524] on 27 October 2019 at 10:32:22.400295 pm'!Object subclass: #Montecarlo	instanceVariableNames: 'n'	classVariableNames: ''	poolDictionaries: ''	category: 'Montecarlo'!!Montecarlo methodsFor: 'as yet unclassified' stamp: 'JenniferSchuerch 10/27/2019 22:27'!drawSquare	"draw the dots in the 'einheits'-square"	| m r x y rand |	m := CanvasMorph new.	m openInWindowLabeled: 'Montecarlo Verfahren'.		m drawBlock: [ :c |		rand := Random new.		1 to: 100000 do: [: i |			x := (rand next).			y := (rand next).			r := (x squared + y squared).			x := x * 400.			y := (1-y) * 400.			r < 1				ifTrue: [c line: x@y to: x@y color: Color red]				ifFalse: [c line: x@y to: x@y color: Color black] ] ].! !!Montecarlo methodsFor: 'constants' stamp: 'JenniferSchuerch 10/27/2019 21:25'!pi	"Approximate pi"	| redPoints iter rand x y approxpi |	redPoints := 0.	iter := n.	rand := Random new.		1 to: iter do: [ :i |			x := (rand next).			y := (rand next).			(x squared + y squared) < 1				ifTrue: [ redPoints := redPoints + 1 ] ].		approxpi := (redPoints / iter) asFloat * 4.	"Transcript 		show: iter;		cr;		show: approxpi; 		cr."	^approxpi 	! !!Montecarlo methodsFor: 'accessing' stamp: 'JenniferSchuerch 10/27/2019 21:21'!count: anObject	n := anObject.! !